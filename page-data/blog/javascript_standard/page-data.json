{"componentChunkName":"component---src-template-post-page-jsx","path":"/blog/javascript_standard/","result":{"data":{"markdownRemark":{"html":"<h1>[자바스크립트]</h1>\n<p><img src=\"https://media.vlpt.us/images/bigbrothershin/post/6a70929a-d760-48b1-bf44-c494499dc986/JavaScriptImg.png\" alt=\"image\"></p>\n<h1>목차</h1>\n<ul>\n<li>배경</li>\n<li>자바스크립트 시작하기</li>\n<li>자바스크립트 기초문법</li>\n<li>변수</li>\n<li>연산자</li>\n<li>조건문</li>\n<li>선택문</li>\n<li>반복문</li>\n<li>객체</li>\n<li>함수</li>\n<li>글을</li>\n</ul>\n<h1>배경</h1>\n<blockquote>\n<p>HTML,CSS의 기초를 끝냈으니 이제는 JavaScript를 공부할려고 한다.\n사실 기초가 부족하다고 느낀 이유가 JS부분에서 느낀거라서 복습을 진행하면서 꼼꼼히 봐야겠다.</p>\n</blockquote>\n<p><code>React</code>든 <code>Angular</code>든 뭐든, 웹을 할려면 JS가 탄탄해야 하는데, 나는 너무 <code>React</code>에 물든 것 같다. 나중에 <code>React</code>가 망하고 다른 라이브러리가 흥할수도 있는건데, 너무 한 우물만 하는 느낌이라서 웹의 원초인 JS를 열심히 해볼려고 한다.</p>\n<h2>자바스크립트 시작하기</h2>\n<p><strong>프론트엔드 개발 이해하기</strong></p>\n<ul>\n<li>1단계, 고객에게 사이트 개발을 의뢰받는다.</li>\n<li>2단계, 고객의 요구에 맞게 작성된 기획안을 토대로 디자이너가 화면에 보여질 UI를 디자인 한다. 이렇게 완성된 디자인 이미지를 퍼블리셔에게 전달한다.</li>\n<li>3단계, 디자인 파일을 전달받은 퍼블리셔너는 그 이미지를 이용해 HTML을 작성하고 CSS를 이용해 화면의 모양을 잡아 정적인 웹 문서를 완성한다.\n<strong>하지만 이렇게 HTML,CSS로 만들어진 웹사이트는 보이기만 할 뿐, 동작은 하지 않기때문에 JavaScript를 도입해야 한다.</strong> 여기서 개발자들이 사용하는 것이 JavaScript나, JQuery등 을 사용하는 것이다. (이 과정을 프론트엔드 개발이라고 한다.)</li>\n<li>4단계, 완성된 문서를 백엔드(Back-end)에 전달하게 되는데, PHP,ASP등의 언어를 사용해서 <strong>보이지 않는 부분</strong>을 개발한다. (여기서 보이지 않는 부분이라는 것은 데이터베이스와의 통신 등을 말하는 것이다.)</li>\n</ul>\n<p>프론트엔드 측에서 JavaScript란 <strong>정적인 웹 문서에 동작을 부여하는 역활</strong>을 하게 되는데, 이제부터 우리가 배울 내용이 어떻게 동작을 부여하는지에 대해서 배울 예정이다.</p>\n<blockquote>\n<p>탄생 배경 같은 부분들을 생략하도록 하겠다. 그냥 한번 구글에 검색해서 읽어보기를...</p>\n</blockquote>\n<hr>\n<p><strong>자바스크립트로 뭘 할수 있는가</strong></p>\n<p>HTML에서는 Canvas,Drag&#x26;Drop등의 풍부한 API가 내장되어 있는데, 여기서 API란 <strong>HTML에서 제공하는 기능의 모임이라고 생각하면 된다.</strong> 이 API들은 자바스크립트로 만들어졌으며, 이를 사용하기 위해서는 자바스크립트를 이해하고 사용하는 것이 좋다.</p>\n<p>최근에 <code>React</code> <code>Angular</code> <code>Jquery</code>등의 다양한 라이브러리들이 등장하면서 그 어떤 언어들보다 자바스크립트의 사용률이 대폭 증가하고 있다.</p>\n<p><strong>원래는 자바스크립트는 아까 말했듯, 정적인 웹 문서에 동작을 부여하는 역활인데</strong> 최근 Node.JS가 등장하고 백엔드에서도 작업할 수 있고, 다양한 분야에서 사용되고 있다.</p>\n<blockquote>\n<p>개발 환경 준비하는 과정은 생략하도록 하겠다.</p>\n</blockquote>\n<hr>\n<p><strong>자바스크립트 맛보기</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">var age = prompt(&quot;당신의 나이는?&quot;, &quot;0&quot;);\nif (age &gt;= 20) {\n  document.write(&quot;당신은 성인입니다.&quot;);\n} else {\n  document.write(&quot;당신은 미성년자입니다.&quot;);\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 스크립트 태그안에 작성을 하게 되면, 사용자측에서 프롬프트가 뜨면서 당신의 나이를 물어볼것이다. 그럴 때에 당신이 입력을 하고 기다리면 문서에 조건에 따른 값이 나올것이다.</p>\n<h2>자바스크립트 기초 문법</h2>\n<p>자바스크립트의 선언문은 <code>script</code>라는 태그가 시작한 부분부터 끝나는 부분까지를 스크립트 영역이라고 한다.</p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;script&gt;\n  자바스크립트 코드;\n&lt;/script&gt;</code>\n        </deckgo-highlight-code>\n<p>이 스크립트는 <code>head</code>,<code>body</code>에 둬도 상관없는데 이 책에서는 <code>head</code>에 넣는다고 하기때문에 <code>head</code>에 넣기로 하자.</p>\n<p>이제 실제로 한번 해볼건데, 다음과 같이 코드를 작성해보자.\no</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">document.write(&quot;환영합니다.&quot;);</code>\n        </deckgo-highlight-code>\n<p>이렇게 작성하게 되면 HTML을 빌드했을때 화면에 \"환영합니다.\"가 출력될것이다.</p>\n<p>자바스크립트는 <strong>객체</strong>지향 언어인데 <code>document</code>라는 객체는 문서 객체를 의미하고, 문서 출력 메서드인 <code>write()</code>를 사용해서 문서에 출력한다.</p>\n<p><strong>자바스크립트에서 주석처리를 하는 방법.</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">// 이렇게 쓰면 한줄 주석.\n\n/*\n이렇게\n쓰면\n여러줄\n주석\n*/\n\n&lt;!--HTML은 이렇게 사용하지롱--&gt;</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p><strong>주석처리를 하는 이유?</strong>\n주석처리를 함으로서, 자바스크립트 선언문 안에 코드가 아닌 설명을 할 수있다. 그래서 내가 쓴 코드에 대한 설명같은 걸 달아놓으면, 나중에 협업할때 코드를 알아 볼 수 있기때문에 큰 장점이 될 수 있다.</p>\n</blockquote>\n<p><strong>내부 스크립트 외부로 분리하는 방법</strong>\n자바스크립트 코드와 HTML의 코드는 분리하는게 좋다. (관리를 원할하게 하기 위해서)</p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;script src=&quot;JS 파일 경로&quot;&gt;&lt;/script&gt;</code>\n        </deckgo-highlight-code>\n<p>그러면 한번 분리해보겠다.</p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;!--statement_test.html--&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;statement_test&lt;/title&gt;\n    &lt;script src=&quot;statement_test.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//statement_test.js\n\ndocument.write(&quot;환영합니다.&quot;);</code>\n        </deckgo-highlight-code>\n<p>이렇게 파일을 나눠서 하면 나중에 유지보수할때 훨씬 편하다.</p>\n<p><strong>코드 입력 시 주의 사항</strong>\n자바스크립트 파일을 작성할 때 몇가지 주의해야 할 사항이 있다.</p>\n<ul>\n<li><strong>자바스크립트는 대/소문자를 구분하여 작성한다.</strong></li>\n<li><strong>코드 한 줄을 작성한 후에는 (;)를 쓰는 것이 좋다.</strong></li>\n<li><strong>코드를 작성할 때는 한 줄에 한 문장만 작성하는 것이 좋다.</strong></li>\n<li><strong>문자형 데이터를 작성할 때는 큰따옴표와 작은따옴표의 겹침오류를 주의해야 한다.</strong></li>\n<li><strong>코드를 작성할 때 중괄호{} 또는 소괄호() 짝이 맞아야 한다.</strong></li>\n</ul>\n<h2>변수</h2>\n<p>변수는 변하는 데이터를 저장할 수 있는 메모리 공간이다.\n<strong>변수에는 데이터가 오직 한 개만 저장된다.</strong></p>\n<p>변수에 저장할 수 있는 데이터의 종류로는 문자형(String) 숫자형(Number) 논리형(Boolean) 빈(Null) 데이터 등이 있다.</p>\n<blockquote>\n<p><strong>Var로 변수선언?</strong>\n옛날 책에서는 var이라는 키워드를 사용해서 변수를 선언했다면, 모던 자바스크립트는 const나 let이라는 키워드를 사용해서 변수를 선언한다.</p>\n</blockquote>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let 변수명;\n//or\nlet 변수명 = 값;</code>\n        </deckgo-highlight-code>\n<p>위와 같은 방법으로 선언한다.</p>\n<blockquote>\n<p><strong>변수명을 짓는 방법?</strong>\n변수명에는 한글을 사용할 수 없으며, 영문과 숫자 그리고 일부 특수문자(_,$)만 사용할 수 있다.\n그리고 변수명에는 <strong>의미에 맞게 짓는게 좋다.</strong> 그리고 카멜케이스로 작성합니다.</p>\n</blockquote>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let box;</code>\n        </deckgo-highlight-code>\n<p>위 상태에서 box라는 변수는 선언은 했지만 값을 초기화를 해주지 않았기때문에 <code>undefined</code>라는 값을 가지게 된다. 이제 위에서 선언한 box에 값을 대입해보겠다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">box = 100;</code>\n        </deckgo-highlight-code>\n<p>이렇게 하면 undefined에서 100이라는 값을 가지게 되었다.\n그럼 만약에 box에 200을 넣고싶으면 어떻게하면 될까?</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">box = 200;</code>\n        </deckgo-highlight-code>\n<p>이렇게 하게 된다면 기존의 100의 데이터는 사라질것이다.\n<strong>왜냐하면 변수에는 하나의 값만 담을수 있기 때문이다.</strong>\n이제 이렇게 작성한 변수를 화면에 출력해보겠다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">document.write(box);</code>\n        </deckgo-highlight-code>\n<p>이렇게 하면 정상적으로 화면에 잘 출력될것이다.</p>\n<p>이제 <strong>자료형</strong>에 대해서 알아보도록 하겠다.</p>\n<ul>\n<li>\n<p><strong>문자형</strong>\n문자형(String)데이터는 \"\"나 ''로 감싸고 있다.\n문자형 데이터에 태그를 포함하여 출력하면 태그로 인식한다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const str = &quot;&lt;h1&gt;안녕!&lt;/h1&gt;&quot;;\ndocument.write(str);</code>\n        </deckgo-highlight-code>\n<ul>\n<li>Result\n  <h1>안녕!</h1>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>숫자형</strong>\n숫자형 데이터는 단어 의미 그대로 숫자를 의미한다.\n주의해야 할것은 \"100\"은 숫자형 데이터가 아니다. <strong>문자형</strong>데이터다.</p>\n<p>Number()라는 함수를 사용하여 \"100\"을 숫자형으로 바꿀수 있다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const num = Number(&quot;100&quot;);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><strong>논리형</strong>\n논리형 데이터는 true(참) false(거짓)이 있는데, 이 데이터는 2개의 데이터를 비교할 때 나오는 결과이다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const 변수명 = true or false;\n//또는\nconst 변수명 = Boolean(&quot;안녕&quot;); //true이다.</code>\n        </deckgo-highlight-code>\n<p><code>Boolean()</code>메서드에 데이터를 입력하면 논리형 데이터인 true나 false를 반환한다.</p>\n</li>\n<li>\n<p><strong>null &#x26; undefined</strong>\nundefined는 변수가 선언되기 전의 기본값이고, null은 선언된 변수의 값이 없는 값일 경우를 가르킨다.\n또한, null은 변수에 저장된 데이터를 비우고자 할 때 사용되는 값이다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">var s; //undefined\nvar t = &quot;hello&quot;;\nt = null; //null</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<blockquote>\n<p><strong>typeof란?</strong></p>\n</blockquote>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">typeof를 사용하면 지정한 데이터 또는 변수에 저장된 자료형을 알고 싶을 때 사용한다.</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const num = 100;\nconst str = &quot;자바스크립트&quot;;\n\ntypeof num; // number\ntypeof str; // string</code>\n        </deckgo-highlight-code>\n<h2>연산자</h2>\n<p><strong>자바스크립트에서 연산자의 종류</strong></p>\n<ul>\n<li>\n<p><strong>산술 연산자</strong>\n산술 연산자는 + , - , * / , %가 있다. (초등학교때 배운 그거 맞다.)</p>\n<blockquote>\n<p>산술 연산자로 연산 대상 데이터가 반드시 2개 이상 있어야 한다.</p>\n</blockquote>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const a = 100;\nconst b = 200;\ndocument.write(a + b);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><strong>문자 결합 연산자</strong>\n문자 결합 연산자는 피연산자가 문자형 데이터이다.\n<strong>여러개의 문자를 하나의 문자형 데이터로 결합할 때 사용한다.</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const name = &quot;홍준혁&quot;;\n\ndocument.write(&quot;Hello My name is &quot; + name);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><strong>대입 연산자</strong>\n<strong>대입 연산자는 데이터를 변수에 저장할 때 사용한다.</strong></p>\n<blockquote>\n<p><strong>복합 대입 연산자는 뭔가요?</strong>\n복합 대입 연산자는 += -= *= /= %= 가 있는데, 산술 연산자와 대입 연산자가 <strong>복합적</strong>으로 적용된 것을 말한다.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>증감 연산자</strong>\n<strong>증감연산자는 ++과 --가 있다.</strong></p>\n<blockquote>\n<p>변수의 값을 1만큼 감소시킨다.</p>\n</blockquote>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">변수--;\n--변수;</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>변수의 값을 1만큼 증가시킨다.</p>\n</blockquote>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">변수++;\n++변수;</code>\n        </deckgo-highlight-code>\n<p>증감연산자의 위치에 따라서 결과도 다르다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let a = 1;\nlet b = ++a;\n//a는 2가 된다.\n//변수 b에는 2가 저장된다.\n\nlet c = a++;\n//변수 c에는 2가 저장된다.\n//a는 3이 된다.</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><strong>비교 연산자</strong>\n<code>크다</code>,<code>작다</code>,<code>같다</code>와 같이 비교할 때 사용하는 연산자이다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const num1 = 10;\nconst num2 = 20;\nif (num1 &lt; num2) {\n  //위 비교연산자는 true를 반환한다.\n  document.write(&quot;num2 is big&quot;);\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const num1 = 10;\nconst str1 = &quot;10&quot;;\n\nconsole.log(num1 == str2); //true\nconsole.log(num1 === str2); //false</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><strong>논리 연산자</strong>\n논리 연산자는 or, and, not이 있다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">console.log(false || true); //true\nconsole.log(false &amp;&amp; true); //false</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><strong>삼항 조건 연산자</strong>\n삼항 조건 연산자는 조건에 따라 실행 결과가 달라진다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const result = true &amp;&amp; false ? &quot;true&quot; : &quot;false&quot;;\n\nconsole.log(result); //&quot;false&quot;</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h3>적정 체중을 구하는 테스트기 만들기</h3>\n<p><strong>🛠적정 체중 구하는 법.</strong></p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">적정 체중 = (본인 신장 - 100) x 0.9</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//source code\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;체중 구하기&lt;/title&gt;\n    &lt;script&gt;\n      const name = prompt(&quot;당신의 이름은?&quot;, &quot;&quot;);\n      const height = prompt(&quot;당신의 신장은?&quot;, &quot;0&quot;);\n      const weight = prompt(&quot;당신의 몸무게는?&quot;, &quot;0&quot;);\n\n      document.write(getNormal());\n\n      function getNormal() {\n        const normal = (height - 100) * 0.9;\n        let result = weight &gt;= normal - 5 &amp;&amp; weight &lt;= normal + 5;\n        result = result ? &quot;적정 체중입니다.&quot; : &quot;적정 체중이 아닙니다.&quot;;\n        return name + &quot; 님은 &quot; + result;\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n<h3>진영이의 하루 지출 내역</h3>\n<p>총 돈이 10000원이 넘으면 얼마나 초과했는지 보여주고 아닐 시에는 돈 관리 잘했다고 칭찬하는 프로그램.</p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;script&gt;\n  const price1 = 3000;\n  const price2 = 6000;\n  const price3 = 3000;\n\n  const sum = price1 + price2 + price3;\n  if (sum &gt; 10000) {\n    alert(sum - 10000 + &quot;원 초과!&quot;);\n  } else {\n    alert(&quot;돈 관리 잘했어요!&quot;);\n  }\n&lt;/script&gt;</code>\n        </deckgo-highlight-code>\n<h2>조건문</h2>\n<p>조건문은 조건식의 값이 참인지 거짓인지에 따라 자바스크립트 코드를 제어한다.\n<strong>if 문</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">if(조건식){\n    자바스크립트 코드;\n}</code>\n        </deckgo-highlight-code>\n<p>if문에 조건식을 만족 할때만 코드를 실행한다.\n만약에 조건식에 다음과 같은 값이 오게된다면,</p>\n<blockquote>\n<p>0 , null , \"\" , undefined</p>\n</blockquote>\n<p>false를 의미하므로 조건문을 실행하지 않는다.</p>\n<p><strong>if ~ else 문</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">if(조건식){\n    자바스크립트 코드;\n}\nelse{\n    자바스크립트 코드;\n}</code>\n        </deckgo-highlight-code>\n<p>else문은 if문의 조건을 만족하지 못했을 때에 실행할 코드이다.</p>\n<p><strong>if ~ else if ~ else 문</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">if(조건식){\n    자바스크립트 코드;\n}else if(조건식){\n    자바스크립트 코드;\n}\nelse if(조건식){\n    자바스크립트 코드;\n}\nelse if(조건식){\n    자바스크립트 코드;\n}\n.\n.\n.\nelse {\n    자바스크립트 코드;\n}</code>\n        </deckgo-highlight-code>\n<p>if로부터 조건에 충족하지 않을때 차레대로 else if문을 검토하게 된다.\n그렇게 하다가 중간에 true를 반환하면 그에 해당하는 자바스크립트 코드를 실행하고 조건문을 종료한다.</p>\n<p><strong>중첩 if 문</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">if(조건식){\n    if(조건식){\n        ...\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같은 코드처럼 중첩하여 조건문을 사용하는 것을 의미한다.</p>\n<p><strong>지금까지 배운 조건문으로 로그인을 구현해보겠다.</strong></p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;로그인&lt;/title&gt;\n    q\n    &lt;script&gt;\n      const id = &quot;qwerty&quot;;\n      const pw = &quot;1234&quot;;\n\n      const user_id = prompt(&quot;아이디는?&quot;, &quot;&quot;);\n      const user_pw = prompt(&quot;비밀번호는?&quot;, &quot;&quot;);\n\n      if (id === user_id) {\n        if (pw === user_pw) {\n          alert(&quot;로그인에 성공했습니다.&quot;);\n          document.write(&quot;환영합니다.&quot;);\n        } else {\n          document.write(&quot;비밀번호가 틀렸습니다.&quot;);\n        }\n      } else {\n        document.write(&quot;아이디가 틀렸습니다.&quot;);\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n<h2>선택문</h2>\n<p><strong>선택문(switch)</strong>문은 변수에 저장된 값과 switch문에 있는 경우(case)의 값을 검사하여 변수와 경우의 값이 일치하는 경우 그에 해당하는 코드를 실행한다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const value = 초기값;\n\nswitch(value){\n    case 값1:\n        코드1;\n    case 값2:\n        코드2;\n    case 값3:\n        코드3;\n    ...\n    default 코드;\n}</code>\n        </deckgo-highlight-code>\n<p><strong>default는 case에 없는 경우를 의미한다.</strong></p>\n<p><strong>배운 switch문을 이용하여 프로그램을 만들어보자.</strong></p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;Switch Test&lt;/title&gt;\n    &lt;script&gt;\n      const favorite = prompt(&quot;당신이 좋아하는 과일은?&quot;, &quot;&quot;);\n      switch (favorite) {\n        case &quot;사과&quot;:\n          document.write(&quot;사과를 좋아하는군요!&quot;);\n          break;\n        case &quot;바나나&quot;:\n          document.write(&quot;바나나 좋아하는군요!&quot;);\n          break;\n        case &quot;배&quot;:\n          document.write(&quot;배를 좋아하는군요!&quot;);\n          break;\n        default:\n          alert(&quot;보가에 없는 값입니다.&quot;);\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p><strong>각 case마다 break를 걸어주는 이유?</strong>\n브레이크를 걸지 않으면, 처음 충족하는 case를 실행한 다음 밑에 case도 검토를 하기 때문에, 원하는 작업을 하고 끝낼려면 break를 걸어주어야 한다.</p>\n</blockquote>\n<h2>반복문</h2>\n<p>반복문을 사용하면 원하는 횟수만큼 반복하여 실행할 수 있다.</p>\n<p><strong>while문</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const value = 초기값;\nwhile(조건){\n    자바스크립트 코드;\n    증감식;\n}</code>\n        </deckgo-highlight-code>\n<p>while문의 실행 순서는</p>\n<ol>\n<li>조건식을 검사하고</li>\n<li>만족한다면 중괄호 안에 코드와 증감식을 실행한다.</li>\n</ol>\n<p>를 반복한다.</p>\n<p>이때, 증감식을 써주는 이유는 <strong>실행한 횟수에 따른 조건 값을 다르게 하고 싶기 때문이다.</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let i = 0;\nwhile (i &lt; 10) {\n  document.write(&quot;안녕하세요&quot; + i, &quot;&lt;br /&gt;&quot;);\n  i++;\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 작성해주면 반복을 10번을 하게된다.</p>\n<p><strong>while문을 사용해서 1 ~ 100까지 짝수만 출력하는 프로그램을 만들어보도록 하자.</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let i = 1;\nwhile (i &lt;= 100) {\n  if (i % 2 === 0) {\n    console.log(i);\n  }\n  i++;\n}\nconsole.log(&quot;==The End==&quot;);</code>\n        </deckgo-highlight-code>\n<p><strong>do while문</strong>\ndo while은 while문과 유사하지만, 조금 다른점이 있다면 조건의 여부와는 상관없이 무조건 처음 한번은 실행하고 조건식을 검사한다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let value = 초기값;\n\ndo{\n    자바스크립트 코드;\n    증감식;\n}while(조건식);</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let i = 0;\n\ndo {\n  console.log(i);\n  i++;\n} while (i &lt; 10);</code>\n        </deckgo-highlight-code>\n<p><strong>for 문</strong>\nfor문은 조건식을 만족할 때까지 특정 코드를 반복하여 실행한다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">for(초기값; 조건식; 증감식){\n    자바스크립트 코드;\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">for (let i = 0; i &lt; 10; i++) {\n  console.log(i);\n}</code>\n        </deckgo-highlight-code>\n<p><strong>break 문</strong>\n반복문에서 break를 만나게 되면 그 반복문은 강제로 중단된다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">for (let i = 0; i &lt; 100; i++) {\n  if (i === 70) {\n    break;\n  }\n}</code>\n        </deckgo-highlight-code>\n<p><strong>continue 문</strong>\n반복문에서만 사용할 수 있는데, 반복을 하다가 continue를 만나게 되면 continue 밑에 있는 코드들을 무시하고 바로 다음 조건식으로 이동한다.</p>\n<h1>객체</h1>\n<p>자바스크립트는 객체 기반의 언이이다.\n객체를 쉽게 이해하기 위해서 예시를 하나 들어보도록 하겠다.</p>\n<blockquote>\n<p>TV가 하나의 객체라고 해보면, TV에는 끄다,키다,음소거하다,볼륨을높히다...등등 많은 기능들이 있는데, 바로 이것이 객체의 개념이다. 하나의 사물을 객체라고 하고, 그 객체안에 다양한 기능,속성들이 있는것이다.</p>\n</blockquote>\n<p>자바스크립트 객체 안에는 메서드, 속성이 있다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">객체.메서드();\n객체.속성; 또는 객체.속성 = 값;</code>\n        </deckgo-highlight-code>\n<p>이렇게 접근할 수 있다.</p>\n<p>여기서 메서드에 대해서 알아보자면,</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">TV.TV를 키다();</code>\n        </deckgo-highlight-code>\n<p>이런 개념이다.</p>\n<p>속성은 다음과 같다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">TV.TV의 길이;</code>\n        </deckgo-highlight-code>\n<p><strong>여기서 중요한 점은 객체안에 존재하지 않는 메서드,속성은 접근할 수 없다.</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">TV.폭팔해라();</code>\n        </deckgo-highlight-code>\n<p>위의 코드와 같은 기능은 일반적인 TV에 있는 기능이 아니므로 오류가 발생한다.</p>\n<p><strong>객체의 종류</strong></p>\n<p>자바스크립트 객체의 종류에는 크게 <strong>내장 객체, 브라우저 객체, 문서 객체 모델로</strong> 나눌 수 있다.</p>\n<ul>\n<li><strong>내장 객체</strong>\n내장 객체는 자바스크립트 엔진에 내장되어 있어 필요한 경우 생성해서 사용할 수 있다.\n대표적인 내장 객체로는 Math(수학), Date(날짜), Array(배열) 등 이 있다.</li>\n<li><strong>브라우저 객체 모델</strong>\n브라우저 객체 모델(BOM)은 브라우저에 계층 구조로 내장되어 있는 객체를 말한다.\n대표적인 브라우저 객체로는 window, screen, location, history등이 있으며,\nwindow는 document와 location 객체의 상위 객체이다.</li>\n<li><strong>문서 객체 모델</strong>\n문서 객체 모델(DOM)은 HTML문서 구조를 의미한다.\nHTML문서의 기본 구조는 최상위 객체로 html이 있으며, 하위 객체로는 head,body가 있다.\n자바스크립트에서 DOM의 구조를 변경하고 싶으면 문서객체모델을 잘 이해해야 한다.</li>\n</ul>\n<p>하지만 IE8 이하 버전에서는 호환성이 떨어지기 때문에 사용하기 힘들다는 단점이 있다.</p>\n<blockquote>\n<p>이제부터 위에 설명한 세가지의 객체에 대해서 자세히 알아보도록 하겠다.</p>\n</blockquote>\n<h2>내장 객체</h2>\n<p>위에서 언급했듯 내장 객체는 자바스크립트 엔진에 있는 객체이다.</p>\n<p>내장 객체를 생성하는 기본형에 대해서 알아보자.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">참조_변수(인스턴스_이름) = new 생성_함수();</code>\n        </deckgo-highlight-code>\n<p>이제 내장 객체를 이용해서 tv라는 객체를 생성을 해보겠다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const tv = new Object();\n\ntv.color = &quot;black&quot;;\ntv.price = 3000000;\ntv.intro = () =&gt; {\n  console.log(&quot;TV 색깔 : &quot; + tv.color);\n  console.log(&quot;TV 가격 : &quot; + tv.price);\n};\n\ntv.intro();\n//객체 메서드 호출</code>\n        </deckgo-highlight-code>\n<p>자바스크립트에서 지원하는 Object객체 를 사용해 보았는데, 이번에는 <code>Date</code>라는 객체를 사용해보겠다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">참조 변수 = new Date();</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const today = new Date();\n\nconsole.log(today.getHours());</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>남은 일 수(밀리초) = 특정 날짜 객체 - 현재 날짜 객체</p>\n</blockquote>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const today = new Date();\nconst nowYear = today.getFullYear();\n\nconst theDate = new Date(nowYear, 11, 31);\nconst diffDate = theDate.getTime() - today.getTime();\n\nconst result = Math.ceil(diffDate / (60 * 1000 * 60 * 24));\nconsole.log(`연말까지 ${result}일 남았습니다.`);</code>\n        </deckgo-highlight-code>\n<p><strong>수학 객체</strong></p>\n<p>수학 객체는 알고리즘 풀때 자주 쓰이므로 알아두는게 좋다.</p>\n<ul>\n<li>Math.abs()\n<blockquote>\n<p>숫자의 절대값을 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.max()\n<blockquote>\n<p>숫자 중 가장 큰 값을 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.min()\n<blockquote>\n<p>숫자 중 가장 작은 값을 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.pow()\n<blockquote>\n<p>숫자의 거듭제곱값을 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.random()\n<blockquote>\n<p>0 ~ 1 사이의 난수를 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.round()\n<blockquote>\n<p>소수점 첫째 자리에서 반올림하여 정수를 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.ceil()\n<blockquote>\n<p>소수점 첫째에서 무조건 올림하여 정수를 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.floor()\n<blockquote>\n<p>소수점 첫째에서 무조건 내림하여 정수를 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.sqrt()\n<blockquote>\n<p>숫자의 제곱근값을 반환합니다.</p>\n</blockquote>\n</li>\n<li>Math.PI\n<blockquote>\n<p>원주율 상수를 반환합니다.</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>0 ~ 10까지 랜덤숫자</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const randomNum = Math.floor(Math.random() * 11);</code>\n        </deckgo-highlight-code>\n<p><strong>배열 객체</strong>\n변수에는 한가지의 데이터만 저장된다고 했었는데, 그러면 여러 개의 데이터를 저장할려면 <strong>배열</strong>을 사용해야 된다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">변수 = new Array(값);</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const arr = new Array(1, 2, 3);</code>\n        </deckgo-highlight-code>\n<p>배열은 각 인덱스에 접근할 수 있다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const arr = new Array(1, 2, 3);\n\nconsole.log(arr[1]);</code>\n        </deckgo-highlight-code>\n<h3>배열 메서드</h3>\n<ul>\n<li>join\n<blockquote>\n<p>배열 객체의 데이터를 연결 문자 기준으로 1개의 문자형 데이터로 반환합니다.</p>\n</blockquote>\n</li>\n<li>reverse\n<blockquote>\n<p>배열 객체의 데이터 순서를 거꾸로 바꾼 후 반환합니다.</p>\n</blockquote>\n</li>\n<li>sort\n<blockquote>\n<p>배열 객체의 데이터를 오름차순으로 정렬합니다.</p>\n</blockquote>\n</li>\n<li>slice\n<blockquote>\n<p>배열 객체의 데이터 중 원하는 인덱스 구간만큼 잘라서 배열 객체로 가져옵니다.</p>\n</blockquote>\n</li>\n<li>splice\n<blockquote>\n<p>배열 객체의 지정 데이터를 삭제하고 그 구간에서 새 데이터를 삽입할 수 있습니다.</p>\n</blockquote>\n</li>\n<li>concat\n<blockquote>\n<p>2개의 배열 객체를 하나로 결합합니다.</p>\n</blockquote>\n</li>\n<li>pop\n<blockquote>\n<p>배열에 저장된 데이터 중 마지막 인덱스에 저장된 데이터를 삭제합니다.</p>\n</blockquote>\n</li>\n<li>push\n<blockquote>\n<p>배열 객체의 마지막 인덱스에 새 데이터를 삽입합니다.</p>\n</blockquote>\n</li>\n<li>shift\n<blockquote>\n<p>배열 객체에 저장된 데이터 중 첫 번째 인덱스에 저장된 데이터를 삭제합니다.</p>\n</blockquote>\n</li>\n<li>unshift\n<blockquote>\n<p>배열 객체의 가장 앞의 인덱스에 새 데이터를 삽입합니다.</p>\n</blockquote>\n</li>\n<li>length\n<blockquote>\n<p>배열에 저장된 총 데이터의 개수를 반환합니다.</p>\n</blockquote>\n</li>\n</ul>\n<p>등등...</p>\n<p><strong>문자열 객체</strong></p>\n<p>문자열 객체는 문자혈 데이터를 객체로 취급하는 것이다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">참조 변수 = new String(문자형 데이터);</code>\n        </deckgo-highlight-code>\n<p>문자열 객체는 다음과 같이 선언해도 객체가 생성된다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">참조 변수 = &quot;문자형 데이터&quot;;</code>\n        </deckgo-highlight-code>\n<h3>문자열 메서드</h3>\n<ul>\n<li>charAt\n<blockquote>\n<p>문자열에서 인덱스 번호에 해당하는 문자를 반환한다.</p>\n</blockquote>\n</li>\n<li>indexOf\n<blockquote>\n<p>문자열에서 왼쪽부터 찾을 문자와 일치하는 문자를 찾아 제일 먼저 일치하는 문자의 인데스 번호를 반환한다.</p>\n</blockquote>\n</li>\n<li>lastIndexOf\n<blockquote>\n<p>문자열에서 오른쪽부터 찾을 문자와 일치하는 문자를 찾아 제일 먼저 일치하는 문자의 인데스 번호를 반환한다.</p>\n</blockquote>\n</li>\n<li>match\n<blockquote>\n<p>문자열에서 왼쪽부터 찾을 문자와 일치하는 문자를 찾아 제일 먼저 찾은 문자를 반환한다. 없으면 null</p>\n</blockquote>\n</li>\n<li>replace\n<blockquote>\n<p>문자열에서 왼쪽부터 바꿀 문자와 일치하는 문자를 찾아 제일 먼저 찾은 문자를 새 문자로 치환한다.</p>\n</blockquote>\n</li>\n<li>search\n<blockquote>\n<p>문자열에서 왼쪽부터 찾을 문자와 일치하는 문자를 찾아 제일 먼저 일치하는 인덱스 번호를 반환한다.</p>\n</blockquote>\n</li>\n<li>slice\n<blockquote>\n<p>a개의 문자를 자르고 b번째 이후에 문자를 자른 후 남은 문자를 반화한다.</p>\n</blockquote>\n</li>\n<li>substring\n<blockquote>\n<p>a인덱스부터 b인덱스 이전 구간의 문자를 반환한다.</p>\n</blockquote>\n</li>\n</ul>\n<p>등등...</p>\n<h2>브라우저 객체 모델</h2>\n<ul>\n<li>\n<p><strong>window 객체의 메서드 종류</strong></p>\n<ul>\n<li>open\n<blockquote>\n<p>URL 페이지를 새 창으로 나타냅니다.</p>\n</blockquote>\n</li>\n<li>alert\n<blockquote>\n<p>경고 창을 나타내고 데이터를 보여줍니다.</p>\n</blockquote>\n</li>\n<li>prompt\n<blockquote>\n<p>질문과 답변으로 질의응답 창을 나타냅니다.</p>\n</blockquote>\n</li>\n<li>move\n<blockquote>\n<p>지정한 새 창의 위치를 이동합니다</p>\n</blockquote>\n</li>\n<li>resizeTo\n<blockquote>\n<p>지정한 새 창의 위치를 이동합니다.</p>\n</blockquote>\n</li>\n<li>setInterval\n<blockquote>\n<p>지속적으로 일정한 시간 간격으로 함수를 호출하여 코드를 실행합니다.</p>\n</blockquote>\n</li>\n<li>setTimeout\n<blockquote>\n<p>단 한 번 일정한 시간 간격으로 함수를 호출하여 코드를 실행한다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>screen 객체의 속성 종류</strong></p>\n<ul>\n<li>screen.width\n<blockquote>\n<p>화면의 너비값을 반환</p>\n</blockquote>\n</li>\n<li>screen.height\n<blockquote>\n<p>화면의 높이값을 반환</p>\n</blockquote>\n</li>\n<li>screen.availWidth\n<blockquote>\n<p>작업 표시줄을 제외한 화면의 너비값을 반환</p>\n</blockquote>\n</li>\n<li>screen.availHeight\n<blockquote>\n<p>작업 표시줄을 제외한 화면의 높이값을 반환</p>\n</blockquote>\n</li>\n<li>screen.screenDepth\n<blockquote>\n<p>사용자 모니터가 표현 가능한 컬러 bit를 반환</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>location 객체의 속성,메서드 종류</strong></p>\n<ul>\n<li>location.href\n<blockquote>\n<p>주소 영역의 참조 주소를 설정하거나 URL을 반환한다.</p>\n</blockquote>\n</li>\n<li>location.hash\n<blockquote>\n<p>URL의 해시값을 반환한다.</p>\n</blockquote>\n</li>\n<li>location.hostname\n<blockquote>\n<p>URL의 호스트 이름을 설정하거나 반환한다.</p>\n</blockquote>\n</li>\n<li>location.host\n<blockquote>\n<p>URL의 호스트 이름과 포트번호를 반환한다.</p>\n</blockquote>\n</li>\n<li>location.protocol\n<blockquote>\n<p>URL 프로토콜을 반환한다.</p>\n</blockquote>\n</li>\n<li>location.search\n<blockquote>\n<p>URL의 쿼리를 반환한다.</p>\n</blockquote>\n</li>\n<li>location.reload()\n<blockquote>\n<p>페이지를 새로고침한다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>history 객체의 속성 종류</strong></p>\n<ul>\n<li>history.back()\n<blockquote>\n<p>이전 방문 사이트로 이동한다.</p>\n</blockquote>\n</li>\n<li>history.foward()\n<blockquote>\n<p>다음 방문 사이트로 이동한다.</p>\n</blockquote>\n</li>\n<li>history.go()\n<blockquote>\n<p>이동 숫자에 -2를 입력하면 2단계 이전의 방문 사이트로 이동한다.</p>\n</blockquote>\n</li>\n<li>history.length\n<blockquote>\n<p>방문 기록에 저장된 목록의 개수를 반환한다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2>함수</h2>\n<p><strong>함수란?</strong></p>\n<blockquote>\n<p>변수에는 데이터를 저장한다고 했었는데, 함수에는 코드를 메모리에 저장했다가 필요할때 마다 호출하여 사용할 수 있다.</p>\n</blockquote>\n<ul>\n<li>함수는 자바스크립트 코드를 저장한다.</li>\n<li>출력문, 제어문 등의 코드를 저장하고 데이터를 반환한다.</li>\n</ul>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function 함수명(){\n    자바스크립트 코드;\n}\nor\nconst 함수명 = () =&gt; {\n    자바스크립트 코드;\n}</code>\n        </deckgo-highlight-code>\n<p>함수정의문 {...} 안에 작성된 코드는 즉시 실행되지 않고, 메모리에 할당되어 있다가 함수가 호출되면 실행하는 형식이다.</p>\n<blockquote>\n<p><strong>function과 function()은 다르다?</strong>\nfunction은 함수 그 자체를 의미하는거고 function()은 함수를 실행하라는 의미이다.</p>\n</blockquote>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function sayHello() {\n  console.log(&quot;Hello&quot;);\n}\n\nsayHello();</code>\n        </deckgo-highlight-code>\n<p><strong>자바스크립트를 이용해 버튼을 클릭할때 마다 배경색을 바꾸는 프로그램</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/115477708-7d336a80-a27f-11eb-8854-2145107fada8.png\" alt=\"image\"></p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;Background&lt;/title&gt;\n    &lt;script&gt;\n      const color = [&quot;white&quot;, &quot;yellow&quot;, &quot;aqua&quot;, &quot;purple&quot;];\n\n      let i = 0;\n      const changeColor = () =&gt; {\n        i++;\n        if (i &gt;= color.length) {\n          i = 0;\n        }\n        console.log(color[i]);\n        const bodyTag = document.querySelector(&quot;body&quot;);\n        bodyTag.style.backgroundColor = color[i];\n      };\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;button onclick=&quot;changeColor()&quot;&gt;배경색 바꾸기&lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n<p><strong>매개 변수가 있는 함수 정의문</strong>\n함수를 호출하면서 값을 전달할수 있는 방법은 매개 변수를 받으면 된다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function sayHelloWithName(name){\n    console.log(`${name}, Hello!`);\n}</code>\n        </deckgo-highlight-code>\n<p>이때, 매개변수는 한개뿐만이 아니라 여러개가 될 수도있다.</p>\n<p><strong>함수에서의 return문의 역할</strong></p>\n<p>return문은 함수에서 결괏값을 반환할 때 사용한다. 또한, 함수가 종료된다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//함수가 종료\nfunction returnExample(){\n    console.log(&quot;Hello&quot;);\n    console.log(&quot;Hello&quot;);\n    console.log(&quot;Hello&quot;);\n    return;\n    console.log(&quot;Hello&quot;); // not working\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//결과값을 반환\nfunction returnValueExample(){\n    return 10 + 20;\n}\n\nconst value = returnValueExample();\nconsole.log(value); //30</code>\n        </deckgo-highlight-code>\n<p><strong>함수 스코프란?</strong></p>\n<blockquote>\n<p>함수 스코프의 의미는 유효 범위를 의미한다.</p>\n</blockquote>\n<p>스코프를 이해하기 위해서는 Local변수와 Global변수를 이해해야 한다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let global; // 글로벌 변수\n\nfunction a(){\n    let local; // 로컬 변수\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let score = 100;\n\nfunction a(){\n    let score = 50;\n\n    console.log(score); //50\n}\n\na();\n\nconsole.log(score); //100</code>\n        </deckgo-highlight-code>\n<p><strong>전역 함수와 지역 함수</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function a(){ // 전역 함수\n    자바스크립트 코드;\n}\n\nfunction b(){\n    function c(){ // 지역 함수\n        자바스크립트 코드;\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2>객체 생성자 함수의 활용</h2>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function CheckWeight(name , height , weight){\n  this.userName = name;\n  this.userHeight = height;\n  this.userWeight = weight;\n  this.maxWeight;\n  this.minWeight;\n  \n  this.getInfo = () =&gt; {\n    let str = &quot;&quot;;\n    str += &quot;이름&quot; + this.userName + &quot;,&quot;;\n    str += &quot;키:&quot; + this.userHeight + &quot;,&quot;;\n    str += &quot;몸무게:&quot; + this.userWeight + &quot;&lt;br&gt;&quot;;\n\n    return str;\n  }\n\n  this.getResult = () =&gt; {\n    this.minWeight = (this.userHeight - 100) * 0.9 - 5;\n    this.maxWeight = (this.userHeight - 100) * 0.9 + 5;\n\n    if(this.userWeight &gt;= this.minWeight &amp;&amp; this.minWeight &lt;= this.maxWeight){\n      return &quot;정상 몸무게입니다.&quot;;\n    }else if(this.userWeight &lt; this.minWeight){\n      return &quot;정상  몸무게보다 미달입니다.&quot;;\n    }else{\n      return &quot;정상 뭄무게보다 초과입니다.&quot;;\n    }\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>다음의 예제는 메모리 절약을 위한 프로토타입을 사용하는 방법이다.</p>\n<h2>프로토타입 사용하기</h2>\n<p>객체를 생성한다면 생성한만큼 메모리를 차지하게 된다.\n메모리 공간을 절약하기 위해서 <strong>프로토타입</strong>을 사용하면 된다.\n프로토타입을 사용하여 등록한 함수는 원형(프로토타입)에서 생성된 객체를 공유할 수 있다.</p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script&gt;\n      function CheckWeight(name, height, weight) {\n        this.userName = name;\n        this.userHeight = height;\n        this.userWeight = weight;\n        this.maxWeight;\n        this.minWeight;\n      }\n      CheckWeight.prototype.getInfo = function() {\n        let str = &quot;&quot;;\n        str += &quot;이름&quot; + this.userName + &quot;,&quot;;\n        str += &quot;키:&quot; + this.userHeight + &quot;,&quot;;\n        str += &quot;몸무게:&quot; + this.userWeight + &quot;&lt;br&gt;&quot;;\n\n        return str;\n      };\n\n      CheckWeight.prototype.getResult = function() {\n        this.minWeight = (this.userHeight - 100) * 0.9 - 5;\n        this.maxWeight = (this.userHeight - 100) * 0.9 + 5;\n\n        if (\n          this.userWeight &gt;= this.minWeight &amp;&amp;\n          this.minWeight &lt;= this.maxWeight\n        ) {\n          return &quot;정상 몸무게입니다.&quot;;\n        } else if (this.userWeight &lt; this.minWeight) {\n          return &quot;정상  몸무게보다 미달입니다.&quot;;\n        } else {\n          return &quot;정상 뭄무게보다 초과입니다.&quot;;\n        }\n      };\n\n      const hong = new CheckWeight(&quot;홍준혁&quot;, 172, 78);\n      const sol = new CheckWeight(&quot;정든솔&quot;, 171, 46);\n\n      document.write(hong.getInfo());\n      document.write(hong.getResult(), &quot;&lt;br&gt;&quot;);\n\n      document.write(sol.getInfo());\n      document.write(sol.getResult(), &quot;&lt;br&gt;&quot;);\n\n      console.log(hong.getResult == sol.getResult);\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code>\n        </deckgo-highlight-code>\n<p>여기서 () => {} 화살표 함수를 쓰면 this가 undefined로 나올것이다.\nfunction으로 키워드를 변경해서 사용해야 한다.</p>\n<h1>글을 마치며...</h1>\n<blockquote>\n<p><strong>내가 진짜 아무것도 모르고 리액트를 했구나!</strong></p>\n</blockquote>\n<p>라는 생각이 들었다. 객체나 함수 부분에서 크게 느꼈는데, 사실 리액트에서 자바스크립트 문법을 쓸때는 정말 \"구현\"만을 위해서 개발했었던 것 같다. 하지만 그 부분이 정말 잘못된 부분이라는 것을 느꼈다.</p>\n<p>우리 학교를 졸업하신 선배께 질문을 했었는데,\n<img src=\"https://user-images.githubusercontent.com/48292190/115487778-57fd2700-a294-11eb-9f60-1cba1ea9d5ef.png\" alt=\"image\">\n라고 하셨을때 정말 감명 깊었다.</p>\n<p><strong>선배께서 말씀하신대로, 우리는 프론트엔드 개발자지 리액트 개발자가 아니다.</strong>\n그래서 나는 코어 자바스크립트를 좀 더 깊게 공부해볼 생각이다.</p>\n<blockquote>\n<p><strong>리액트를 쓰는 사람이 아니라, 리액트를 만들 수 있는 사람이 되자.</strong></p>\n</blockquote>\n<p>물론, 당연히, 나는 자바스크립트 생태계에 완벽히 다 안다고 생각하지 않는다.\n오히려 아직 빙산의 일각이라고 생각한다.</p>\n<p>아무튼, 긴 글을 마치며 나는 이만...!</p>\n<center>2021-04-21 수<br>홍준혁</center>","frontmatter":{"title":"🌟 자바스크립트 기초/기본","profile":"https://avatars.githubusercontent.com/u/48292190?v=4","name":"홍준혁","createdAt":"2021년 4월 21일"}}},"pageContext":{"slug":"/blog/javascript_standard/"}},"staticQueryHashes":[]}