{"componentChunkName":"component---src-template-post-page-jsx","path":"/blog/recoil_standard/","result":{"data":{"markdownRemark":{"html":"<h1>About Recoil</h1>\n<h1>공식 문서 <a href=\"https://recoiljs.org/ko/\">링크</a></h1>\n<p><img src=\"https://miro.medium.com/max/2000/1*0SkjAGdVWYe4ja5Qu4DeJg.jpeg\" alt=\"image\"></p>\n<blockquote>\n<p><strong>리코일은 리액트를 위한 상태관리 라이브러리로 페이스북에서 제작을 하고있으며, 현제 많은 프론트엔드 개발자들이 기대하고 있는 기술이기도 하다.</strong></p>\n</blockquote>\n<p>이 레포지토리는 어떻게하면 리액트에서 리코일을 잘 사용할 수 있을까에 대한 고민의 흔적이다.\n<code>Redux</code>, <code>MobX</code>등 다양한 상태관리 라이브러리를 써봤지만 둘다 결국에는 완전히 나를 만족시키지 못했다...(라이브러리에 어떠한 문제가 있었던것은 아니다.) 그저 상태관리 패턴들이 맘에 들지 않았고 나는 꾸역꾸역 쓸 수 밖에 없었다. 그러던중 <strong>페이스북이 새로운 솔루션을 제시했다.</strong> 그것이 바로 리코일이고 나는 리코일에 대해서 여기에 모두 담는것이 목표이다.</p>\n<hr>\n<h2>카운터</h2>\n<blockquote>\n<p>(이 레포에서)처음으로 만든 리코일 프로젝트이다.</p>\n</blockquote>\n<p><a href=\"https://github.com/Hong-JunHyeok/Recoil_Study/tree/master/recoil_js_counter\">링크</a></p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/115545218-81db3b80-a2de-11eb-9535-5c9949f8bbe5.png\" alt=\"image\"></p>\n<h1>🤨 리코일에 대해서...</h1>\n<h1>동기</h1>\n<p>기존에 리액트 자체적으로 지원하던 상태관리 기능을 사용해도 되지만 단점이 있다.</p>\n<ul>\n<li>컴포넌트의 상태는 공통된 조상으로 넣어야 공유할 수 있지만, 이것은 거대한 트리가 포함되어 다시 렌더링을 해야한다.</li>\n<li>Context는 단일 값만 저장할 수 있으며 자체적인 소비자가 있는 정의되지않은 집합 값은 저장할 수 없다.</li>\n<li>이 두가지가 트리의 윗부분 (state가 존재하는 곳)부터 트리의 잎 (state가 사용되는 곳)까지의 코드 분할을 어렵게한다.</li>\n</ul>\n<p>그래서 이를 보완하고자 Facebook에서는 Recoil이라는 라이브러리를 개발했다.</p>\n<p>Recoil은 직교하지만 본질적인 방향 그래프를 정의하고 React 트리에 붙인다. 다음과 같은 접근 방식을 통해 상태 변화는 이 그래프의 뿌리(atoms라고 부르는)에서 순수함수(selectors라고 부르는 것)를 거쳐 컴포넌트로 흐른다.</p>\n<p><strong>리코일의 장점</strong></p>\n<p>-우리는 공유되는 상태가 React 내부 상태와 동일한 간단한 get/set 인터페이스를 갖는 boilerplate-free API를 얻는다.(필요한 경우 reducers 등으로 캡슐화할 수 있다.)</p>\n<p>-우리는 Concurrent 모드와 추후 사용가능한 다른 새로 제공되는 React의 기능과의 호환 가능성을 갖는다.</p>\n<p>-상태 정의는 증분적이고 분산되어 있어 코드 분할이 가능하다.</p>\n<p>-상태를 사용하는 컴포넌트를 수정하지 않고 파생된 데이터로 상태를 대체할 수 있다.</p>\n<p>-파생된 데이터는 그것을 사용하는 구성 요소를 수정하지 않고 동기식 데이터와 비동기식 사이에서 이동할 수 있다.</p>\n<p>-우리는 탐색을 일급 개념으로 취급할 수 있고 심지어 링크에서 상태 전환을 인코딩할 수도 있다.</p>\n<p>-역호환성 방식으로 전체 애플리케이션 상태를 유지하기가 쉬우므로 지속된 상태가 애플리케이션 변경에서 살아남을 수 있다.</p>\n<h1>주요 개념</h1>\n<p><strong>Atoms는 컴포넌트가 구독할 수 있는 상태의 단위다. Selectors 가 이 상태를 동기 또는 비동기식으로 변환한다.</strong></p>\n<h2>Atoms</h2>\n<p>Atoms는 상태의 단위다. 그것들은 업데이트와 구독이 가능하다. atom이 업데이트되면 각각의 구독된 컴포넌트는 새로운 값으로 다시 렌더링 된다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const fontSizeState = atom({\n  key: &quot;fontSizeState&quot;,\n  default: 14,\n});</code>\n        </deckgo-highlight-code>\n<p>Atoms는 디버깅, 지속성, 그리고 모든 atom들의 맵을 볼 수 있는 특정 고급 API에 사용되는 고유한 키가 필요하다. <strong>두 atom이 같은 키를 갖는 것은 오류이기 때문에 그것들이 전역적으로 고유하다는 것을 확실하게 해야 한다.</strong> React 컴포넌트의 상태처럼 기본값 또한 가지고 있는다.</p>\n<p>컴포넌트에서 atom을 읽고 쓰려면 useRecoilState라는 흑을 사용한다. React의 useState와 같지만 이제는 다음과 같은 컴포넌트들 사이에서 상태를 공유할 수 있게 되었다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function FontButton() {\n  const [fontSize, setFontSize] = useRecoilState(fontSizeState);\n  return (\n    &lt;button\n      onClick={() =&gt; setFontSize((size) =&gt; size + 1)}\n      style={{ fontSize }}\n    &gt;\n      Click to Enlarge\n    &lt;/button&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>이제 버튼을 클릭하면 fontSize가 1씩 증가하는 모습을 볼 수 있다.</p>\n<h2>Selectors</h2>\n<p>Selector는 atom이나 다른 selector를 입력으로 받아들이는 순수한 함수다.</p>\n<p><strong>상위의 atom 또는 selector가 업데이트되면 selector 함수가 재평가된다. 컴포넌트들은 selector를 atom처럼 구독할 수 있고 selector가 변경될 때 다시 렌더링이 이루어진다.</strong></p>\n<p>Selector는 상태를 기반으로 하는 파생 데이터를 계산하는 데 사용된다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const fontSizeLabelState = selector({\n  key: &quot;fontSizeLabelState&quot;,\n  get: ({ get }) =&gt; {\n    const fontSize = get(fontSizeState);\n    const unit = &quot;px&quot;;\n\n    return `${fontSize}${unit}`;\n  },\n});</code>\n        </deckgo-highlight-code>\n<p>get속성은 계산될 함수다. get인자를 통해 atom의 값이나 다른 selector에 접근할 수 있다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function FontButton() {\n  const [fontSize, setFontSize] = useRecoilState(fontSizeState);\n  const fontSizeLabel = useRecoilValue(fontSizeLabelState);\n\n  return (\n    &lt;&gt;\n      &lt;div&gt;Current font size: ${fontSizeLabel}&lt;/div&gt;\n\n      &lt;button onClick={setFontSize(fontSize + 1)} style={{ fontSize }}&gt;\n        Click to Enlarge\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<h1>설치</h1>\n<p><a href=\"https://recoiljs.org/ko/docs/introduction/installation\">이 문서</a>를 참고해주세요!</p>\n<h1>RecoilRoot</h1>\n<p>\"전역\"적으로 상태를 관리해야하니까 <code>RecoilRoot</code>가 필요하다.</p>\n<p>RecoilRoot의 위치는 루트 컴포넌트가 제일 좋다.</p>\n<p><code>index.js</code>예시이다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\nimport App from &quot;./App&quot;;\nimport { RecoilRoot } from &quot;recoil&quot;;\n\nReactDOM.render(\n  &lt;React.StrictMode&gt;\n    &lt;RecoilRoot&gt;\n      &lt;App /&gt;\n    &lt;/RecoilRoot&gt;\n  &lt;/React.StrictMode&gt;,\n  document.getElementById(&quot;root&quot;)\n);</code>\n        </deckgo-highlight-code>\n<p>이러면 전역적으로 recoil을 사용할 준비가 된것이다.</p>\n<h1>Atom</h1>\n<p>Atom은 상태(state)의 일부를 나타낸다. Atoms는 어떤 컴포넌트에서나 읽고 쓸 수 있다. atom의 값을 읽는 컴포넌트들은 암묵적으로 atom을 구독한다. 그래서 <strong>atom에 어떤 변화가 있으면 그 atom을 구독하는 모든 컴포넌트들이 재 렌더링 되는 결과가 발생할 것이다.</strong></p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const textState = atom({\n  key: &quot;textState&quot;, // atom의 고유 아이디\n  default: &quot;&quot;, // 기본 값\n});</code>\n        </deckgo-highlight-code>\n<p>이제 컴포넌트가 atom을 읽고 쓰게 하기 위해서는 useRecoilState()를 아래와 같이 사용하면 된다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function CharacterCounter() {\n  return (\n    &lt;div&gt;\n      &lt;TextInput /&gt;\n      &lt;CharacterCount /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction TextInput() {\n  const [text, setText] = useRecoilState(textState);\n\n  const onChange = (event) =&gt; {\n    setText(event.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input type=&quot;text&quot; value={text} onChange={onChange} /&gt;\n      &lt;br /&gt;\n      Echo: {text}\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<h1>Selector</h1>\n<p>Selector는 파생된 상태(derived state)의 일부를 나타낸다. <strong>파생된 상태는 상태의 변화다.</strong> 파생된 상태를 어떤 방법으로든 주어진 상태를 수정하는 순수 함수에 전달된 상태의 결과물로 생각할 수 있다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const charCountState = selector({\n  key: &quot;charCountState&quot;, // 고유 아이디\n  get: ({ get }) =&gt; {\n    const text = get(textState);\n\n    return text.length;\n  },\n});</code>\n        </deckgo-highlight-code>\n<p><strong>useRecoilValue() 훅을 사용해서 charCountState 값을 읽을 수 있다.</strong></p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function CharacterCount() {\n  const count = useRecoilValue(charCountState);\n\n  return &lt;&gt;Character Count: {count}&lt;/&gt;;\n}</code>\n        </deckgo-highlight-code>\n<h1>본격적인 Recoil 프로젝트 개발</h1>\n<p>이 섹션은 Recoil과 React가 설치했다고 가정한다. 앞으로의 섹션의 컴포넌트들은 부모트리에 <code>&#x3C;RecoilRoot /></code>가 있다고 가정한다.</p>\n<ul>\n<li>todo 아이템 추가</li>\n<li>todo 아이템 수정</li>\n<li>todo 아이템 삭제</li>\n<li>todo 아이템 필터링</li>\n<li>유용한 통계 표시</li>\n</ul>\n<p>이 튜토리얼에서는 간단한 <strong>todo 리스트 애플리케이션</strong>을 제작한다.</p>\n<p><strong>그 과정에서, 우리는 Recoil API에 의해 노출된 atoms, selectors, atom families와 hook를 다룰 것이다. 최적화 또한 다룰 것이다.</strong></p>\n<p>Atoms는 애플리케이션 상태의 source of truth를 갖는다. todo 리스트에서 source of truth는 todo 아이템을 나타내는 객체로 이루어진 배열이 될 것이다.</p>\n<p>우리는 atom 리스트를 todoListState라고 하고 이것을 atom() 함수를 이용해 생성할 것이다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const todoListState = atom({\n  key: &quot;todoListState&quot;,\n  default: [],\n});</code>\n        </deckgo-highlight-code>\n<p>이제 todoList코드를 작성한다.</p>\n<p>전체 소스코드다. 자세한 설명은 주석으로 달겠다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import { useState } from &quot;react&quot;;\nimport { useRecoilValue, useSetRecoilState } from &quot;recoil&quot;;\nimport todoListState from &quot;./atom/todo&quot;; //atom을 가져온다.\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;TodoList /&gt;\n      {/*부모 컴포넌트인 TodoList를 불러온다.*/}\n    &lt;/div&gt;\n  );\n}\n\nfunction TodoList() {\n  const todoList = useRecoilValue(todoListState);\n  //todoList배열을 useRecoilValue를 이용해서 가져온다.\n\n  const mapTodoList = todoList.map((todoItem) =&gt; (\n    &lt;TodoItem key={todoItem.id} item={todoItem} /&gt;\n  ));\n  //가져온 todo배열을 mapping해준다.\n\n  return (\n    &lt;&gt;\n      {/* &lt;TodoListStats /&gt; */}\n      {/* &lt;TodoListFilters /&gt; */}\n      &lt;TodoItemCreator /&gt;\n      &lt;ul&gt;{mapTodoList}&lt;/ul&gt;\n      {/* mapping한 todos를 출력한다. */}\n    &lt;/&gt;\n  );\n}\n\nfunction TodoItemCreator() {\n  const [inputValue, setInputValue] = useState(&quot;&quot;);\n  //todo를 생성할때 text의 input값을 위한 state이다.\n  const setTodoList = useSetRecoilState(todoListState);\n  //todoList atom의 setter함수를 가져온다.\n\n  //addItem함수는 todo를 추가하는 함수이다.\n  const addItem = () =&gt; {\n    setTodoList((prevTodoList) =&gt; [\n      ...prevTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n        isComplete: false,\n      },\n    ]);\n    // setTodoList를 사용해서 기존 배열을 복사하고, 새로운 배열을 붙인 값을 리턴한다.\n    setInputValue(&quot;&quot;);\n    //input값을 리턴한다.\n  };\n\n  //onChange함수는 inputValue의 값을 변화시키는 함수이다.\n  const onChange = (event) =&gt; {\n    setInputValue(event.target.value);\n    //event.target.value는 input값의 value를 의미한다.\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input type=&quot;text&quot; value={inputValue} onChange={onChange} /&gt;\n      &lt;button onClick={addItem}&gt;Add&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction TodoItem({ item }) {\n  return &lt;li&gt;{item.text}&lt;/li&gt;;\n  //mapping할때 필요한 컴포넌트이다.\n}\n\n//getId가 될때마다 id를 증가시킨다.\n//todo객체에 id필드를 위한 함수이다.\nlet id = 0;\nconst getId = () =&gt; {\n  return id++;\n};\n\nexport default App;</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/117094181-0bd6da00-ad9e-11eb-922f-b28045fcb7e8.png\" alt=\"image\"></p>\n<p>이렇게 잘 나오면 todolist의 기본적인 기능이 적용이 된것이다.\n이제 selector를 이용해서 todo들을 filter하는 작업을 해보도록 하겠다.</p>\n<p><strong>Selector는 파생된 상태(derived state)의 일부를 나타낸다.</strong></p>\n<p>우리가 selector로 만들 상태는 총 두개다.</p>\n<ul>\n<li>\n<p><strong>필터링 된 todo 리스트</strong> : 전체 todo 리스트에서 일부 기준에 따라 특정 항목이 필터링 된 새 리스트(예: 이미 완료된 항목 필터링)를 생성되어 파생된다.</p>\n</li>\n<li>\n<p><strong>Todo 리스트 통계</strong> : 전체 todo 리스트에서 목록의 총 항목 수, 완료된 항목 수, 완료된 항목의 백분율 같은 리스트의 유용한 속성들을 계산하여 파생된다.</p>\n</li>\n</ul>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const todoListFilterState = atom({\n  key: &quot;todoListFilterState&quot;,\n  default: &quot;Show All&quot;,\n});</code>\n        </deckgo-highlight-code>\n<p>여기서 todoListFilterState의 값은 뭘 의미하냐면 <strong>필터 옵션</strong>을 의미한다.</p>\n<p>\"Show All\", \"Show Completed\"과 \"Show Uncompleted\"가 있다.</p>\n<p>이제 todoListState와 todoListFilterState 두개의 state를 가져와서 filter해보는 작업을 해보자.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const filteredTodoListState = selector({\n  key: &quot;filteredTodoListState&quot;,\n  get: ({ get }) =&gt; {\n    const filter = get(todoListFilterState);\n    const list = get(todoListState);\n\n    switch (filter) {\n      case &quot;Show Completed&quot;:\n        return list.filter((item) =&gt; item.isComplete);\n      case &quot;Show Uncompleted&quot;:\n        return list.filter((item) =&gt; !item.isComplete);\n      default:\n        return list;\n    }\n  },\n});</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>컴포넌트 관점에서 보면 selector는 atom을 읽을 때 사용하는 같은 훅을 사용해서 읽을 수 있다. 그러나 특정한 훅은 쓰기 가능 상태 (즉, useRecoilState())에서만 작동하는 점을 유의해야 한다. 모든 atom은 쓰기 가능 상태지만 selector는 일부만 쓰기 가능한 상태(get과 set 속성을 둘 다 가지고 있는 selector)로 간주된다. 이 주제에 대해서 더 많은 정보를 보고 싶다면 Core Concepts 페이지를 보면 된다.</p>\n</blockquote>\n<p><code>filteredTodoListState</code>는 내부적으로 2개의 의존성 <code>todoListFilterState</code>와 <code>todoListState</code>을 추적한다. 그래서 둘 중 하나라도 변하면 <code>filteredTodoListState</code>는 재 실행된다.</p>\n<p>이제 <code>TodoListFilters</code> 컴포넌트를 만들어보자.</p>\n<p>자세한 설명을 주석으로 설명하겠다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function TodoListFilters() {\n  const [filter, setFilter] = useRecoilState(todoListFilterState);\n  //todoListFilterState atom을 불러옴. state와 setter함수 get\n\n  const updateFilter = ({ target: { value } }) =&gt; {\n    setFilter(value);\n  };\n  //select box가 변할때마다 updateFilter함수가 실행되면서, filter state가 바뀜\n\n  return (\n    &lt;&gt;\n      Filter:\n      &lt;select value={filter} onChange={updateFilter}&gt;\n        &lt;option value=&quot;Show All&quot;&gt;All&lt;/option&gt;\n        &lt;option value=&quot;Show Completed&quot;&gt;Completed&lt;/option&gt;\n        &lt;option value=&quot;Show Uncompleted&quot;&gt;Uncompleted&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>아래는 전체 코드다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//todo.js\nimport { atom, selector } from &quot;recoil&quot;;\n\nexport const todoListState = atom({\n  key: &quot;todoListState&quot;,\n  default: [],\n});\n\nexport const todoListFilterState = atom({\n  key: &quot;todoListFilterState&quot;,\n  default: &quot;Show All&quot;,\n});\n\nexport const filteredTodoListState = selector({\n  key: &quot;filteredTodoListState&quot;,\n  get: ({ get }) =&gt; {\n    const filter = get(todoListFilterState);\n    const list = get(todoListState);\n\n    switch (filter) {\n      case &quot;Show Completed&quot;:\n        return list.filter((item) =&gt; item.isComplete);\n      case &quot;Show Uncompleted&quot;:\n        return list.filter((item) =&gt; !item.isComplete);\n      default:\n        return list;\n    }\n  },\n});</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//app.js\nimport { useState } from &quot;react&quot;;\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from &quot;recoil&quot;;\nimport {\n  todoListState,\n  todoListFilterState,\n  filteredTodoListState,\n} from &quot;./atom/todo&quot;;\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;TodoList /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction TodoList() {\n  const todoList = useRecoilValue(filteredTodoListState);\n\n  const mapTodoList = todoList.map((todoItem) =&gt; (\n    &lt;TodoItem key={todoItem.id} item={todoItem} /&gt;\n  ));\n\n  return (\n    &lt;&gt;\n      {/* &lt;TodoListStats /&gt; */}\n      &lt;TodoListFilters /&gt;\n      &lt;TodoItemCreator /&gt;\n      &lt;ul&gt;{mapTodoList}&lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction TodoItemCreator() {\n  const [inputValue, setInputValue] = useState(&quot;&quot;);\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const addItem = () =&gt; {\n    setTodoList((prevTodoList) =&gt; [\n      ...prevTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n        isComplete: false,\n      },\n    ]);\n    setInputValue(&quot;&quot;);\n  };\n\n  const onChange = (event) =&gt; {\n    setInputValue(event.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input type=&quot;text&quot; value={inputValue} onChange={onChange} /&gt;\n      &lt;button onClick={addItem}&gt;Add&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction TodoListFilters() {\n  const [filter, setFilter] = useRecoilState(todoListFilterState);\n  //todoListFilterState atom을 불러옴. state와 setter함수 get\n\n  const updateFilter = ({ target: { value } }) =&gt; {\n    setFilter(value);\n  };\n  //select box가 변할때마다 updateFilter함수가 실행되면서, filter state가 바뀜\n\n  return (\n    &lt;&gt;\n      Filter:\n      &lt;select value={filter} onChange={updateFilter}&gt;\n        &lt;option value=&quot;Show All&quot;&gt;All&lt;/option&gt;\n        &lt;option value=&quot;Show Completed&quot;&gt;Completed&lt;/option&gt;\n        &lt;option value=&quot;Show Uncompleted&quot;&gt;Uncompleted&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction TodoItem({ item }) {\n  return &lt;li&gt;{item.text}&lt;/li&gt;;\n}\n\nlet id = 0;\nconst getId = () =&gt; {\n  return id++;\n};\n\nexport default App;</code>\n        </deckgo-highlight-code>\n<p>그러면 정상적으로 필터링이 잘 되는 모습을 볼 수 있다.\n<img src=\"https://user-images.githubusercontent.com/48292190/117095374-2f4f5400-ada1-11eb-92cf-b74ff4f23edb.png\" alt=\"image\"></p>\n<p>우리가 적업할 기능들은</p>\n<ul>\n<li>todo 항목들의 총개수</li>\n<li>완료된 todo 항목들의 총개수</li>\n<li>완료되지 않은 todo 항목들의 총개수</li>\n<li>완료된 항목의 백분율</li>\n</ul>\n<p>이다.</p>\n<p>필요한 데이터를 포함하는 객체를 반환하는 selector 하나를 만드는 것이 더 쉬운 방법일것이다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const todoListStatsState = selector({\n  key: &quot;todoListStatsState&quot;,\n  get: ({ get }) =&gt; {\n    const todoList = get(todoListState);\n    const totalNum = todoList.length;\n    const totalCompletedNum = todoList.filter((item) =&gt; item.isComplete).length;\n    const totalUncompletedNum = totalNum - totalCompletedNum;\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum;\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    };\n  },\n});</code>\n        </deckgo-highlight-code>\n<p>아래와 같은 방법으로 말이다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function TodoListStats() {\n  const {\n    totalNum,\n    totalCompletedNum,\n    totalUncompletedNum,\n    percentCompleted,\n  } = useRecoilValue(todoListStatsState);\n\n  const formattedPercentCompleted = Math.round(percentCompleted * 100);\n\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;Total items: {totalNum}&lt;/li&gt;\n      &lt;li&gt;Items completed: {totalCompletedNum}&lt;/li&gt;\n      &lt;li&gt;Items not completed: {totalUncompletedNum}&lt;/li&gt;\n      &lt;li&gt;Percent completed: {formattedPercentCompleted}&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>TodoListStats를 하나 만들고 렌더링을 해보자.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/117095722-14c9aa80-ada2-11eb-97c1-29b3e4e478bf.png\" alt=\"image\"></p>\n<p>만들다보니 까먹은게 있다...삭제와 수정을 안만들었다...\n후딱 만들어보도록 하자</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}</code>\n        </deckgo-highlight-code>\n<p>우선 위와같이 수정, 삭제를 위한 유틸리티 함수를 만들어주자.</p>\n<p>replaceItemAtIndex은 수정 할 index를 인자로 받고 그 전의 배열과 index뒤에 배열을 복사한 뒤, index의 값을 끼워넣는다는 의미이다.</p>\n<p>removeItemAtIndex은 삭제할 index를 인자로 받고 그 전의 배열을 복사,index뒤의 배열을 복사 후 index의 값을 제외하겠다는 의미이다.</p>\n<p>이제 만들었으니까 사용해보도록 하자.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import { useState } from &quot;react&quot;;\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from &quot;recoil&quot;;\nimport {\n  todoListState,\n  todoListFilterState,\n  filteredTodoListState,\n  todoListStatsState,\n} from &quot;./atom/todo&quot;;\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;TodoList /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction TodoList() {\n  const todoList = useRecoilValue(filteredTodoListState);\n\n  const mapTodoList = todoList.map((todoItem) =&gt; (\n    &lt;TodoItem key={todoItem.id} item={todoItem} /&gt;\n  ));\n\n  return (\n    &lt;&gt;\n      &lt;TodoListStats /&gt;\n      &lt;TodoListFilters /&gt;\n      &lt;TodoItemCreator /&gt;\n      &lt;ul&gt;{mapTodoList}&lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction TodoItemCreator() {\n  const [inputValue, setInputValue] = useState(&quot;&quot;);\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const addItem = () =&gt; {\n    setTodoList((prevTodoList) =&gt; [\n      ...prevTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n        isComplete: false,\n      },\n    ]);\n    setInputValue(&quot;&quot;);\n  };\n\n  const onChange = (event) =&gt; {\n    setInputValue(event.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input type=&quot;text&quot; value={inputValue} onChange={onChange} /&gt;\n      &lt;button onClick={addItem}&gt;Add&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction TodoListFilters() {\n  const [filter, setFilter] = useRecoilState(todoListFilterState);\n  //todoListFilterState atom을 불러옴. state와 setter함수 get\n\n  const updateFilter = ({ target: { value } }) =&gt; {\n    setFilter(value);\n  };\n  //select box가 변할때마다 updateFilter함수가 실행되면서, filter state가 바뀜\n\n  return (\n    &lt;&gt;\n      Filter:\n      &lt;select value={filter} onChange={updateFilter}&gt;\n        &lt;option value=&quot;Show All&quot;&gt;All&lt;/option&gt;\n        &lt;option value=&quot;Show Completed&quot;&gt;Completed&lt;/option&gt;\n        &lt;option value=&quot;Show Uncompleted&quot;&gt;Uncompleted&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction TodoListStats() {\n  const {\n    totalNum,\n    totalCompletedNum,\n    totalUncompletedNum,\n    percentCompleted,\n  } = useRecoilValue(todoListStatsState);\n\n  const formattedPercentCompleted = Math.round(percentCompleted * 100);\n\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;Total items: {totalNum}&lt;/li&gt;\n      &lt;li&gt;Items completed: {totalCompletedNum}&lt;/li&gt;\n      &lt;li&gt;Items not completed: {totalUncompletedNum}&lt;/li&gt;\n      &lt;li&gt;Percent completed: {formattedPercentCompleted}&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n\nfunction TodoItem({ item }) {\n  const [toggleEdit, setToggleEdit] = useState(false);\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n  const index = todoList.findIndex((listItem) =&gt; listItem === item);\n\n  const editItemText = (event) =&gt; {\n    const { value } = event.target;\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      text: value,\n    });\n\n    setTodoList(newList);\n  };\n\n  const onEdit = () =&gt; {\n    setToggleEdit(!toggleEdit);\n  };\n\n  const toggleItemCompletion = () =&gt; {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      isComplete: !item.isComplete,\n    });\n\n    setTodoList(newList);\n  };\n\n  const deleteItem = () =&gt; {\n    const newList = removeItemAtIndex(todoList, index);\n\n    setTodoList(newList);\n  };\n\n  return (\n    &lt;li&gt;\n      {toggleEdit &amp;&amp; (\n        &lt;input type=&quot;text&quot; value={item.text} onChange={editItemText} /&gt;\n      )}\n      {item.text}\n      &lt;input\n        type=&quot;checkbox&quot;\n        checked={item.isComplete}\n        onChange={toggleItemCompletion}\n      /&gt;\n      &lt;button onClick={deleteItem}&gt;X&lt;/button&gt;\n      &lt;button onClick={onEdit}&gt; {toggleEdit ? &quot;완료&quot; : &quot;수정&quot;} &lt;/button&gt;\n    &lt;/li&gt;\n  );\n}\n\nfunction replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\n\nlet id = 0;\nconst getId = () =&gt; {\n  return id++;\n};\n\nexport default App;</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/117099971-7fccae80-adad-11eb-9eb8-f149060b53e3.png\" alt=\"image\"></p>\n<h1>🎊 축하합니다! 🎊</h1>\n<p>투두리스트 개념을 완벽히 이해했다면, 당신은 atom , selector를 마스터했습니다!</p>","frontmatter":{"title":"⚡️ 리코일 - 리액트의 새로운 전역상태관리 라이브러리","profile":"https://avatars.githubusercontent.com/u/48292190?v=4","name":"홍준혁","createdAt":"2021년 5월 5일"}}},"pageContext":{"slug":"/blog/recoil_standard/"}},"staticQueryHashes":[]}