{"componentChunkName":"component---src-template-post-page-jsx","path":"/blog/spring_boot_mvc_pattern/","result":{"data":{"markdownRemark":{"html":"<p><br><br><br>\n<span style = \"color : #E04845\">✓</span> 이 글은 자세한 개념이 적혀있지 않을 수 있습니다.</p>\n <h1>✔️ 무엇을 배우나요?</h1>\n<ul>\n<li>MVC 패턴이란?<br></li>\n<li>model, view, controller에 대해서<br></li>\n<li>MVC 패턴을 사용하는 이유<br></li>\n</ul>\n<p><br> <br> <br> <br> <br></p>\n<h1>📲 MVC 패턴이란?</h1>\n<p><code>MVC</code>는 <code>Model</code> <code>View</code> <code>Controller</code> 세 개를 의미합니다.</p>\n<blockquote>\n<p>모델-뷰-컨트롤러(model–view–controller, MVC)는 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다. 이 패턴을 성공적으로 사용하면, 사용자 인터페이스로부터 비즈니스 로직을 분리하여 애플리케이션의 시각적 요소나 그 이면에서 실행되는 비즈니스 로직을 서로 영향 없이 쉽게 고칠 수 있는 애플리케이션을 만들 수 있다.<br><div style=\"color : #C1C1C1\">-출처:<a href=\"https://url.kr/e9fvsz\">위키피디아</a></div></p>\n</blockquote>\n<p>위키피디아를 보면 이렇게 설명하고 있습니다.</p>\n<p>쉽게 말해 MVC 패턴은 모델과 뷰, 컨트롤러를 분리해 관리하는것이라 보면 됩니다.</p>\n<p>그렇다면 각각의 역할은 무엇이고, 서로 영향 없이 쉽게 고친다는 말이 무엇인지 알아봅시다.\n<br> <br> <br> <br> <br></p>\n<h1>모델(Model)</h1>\n<p>데이터를 가진 객체</p>\n<br>\n모델은 다음 규칙을 가지고있습니다.\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">1. 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야만 한다.\n\n2. 뷰(View)나 컨트롤러(Controller)에 대해서 어떤 정보도 알지 말이야 한다.\n\n3. 변경이 일어나면, 변경 통지에 대한 처리 방법을 구현해야만 한다.</code>\n        </deckgo-highlight-code>\n<p>예를 들면 사용자가 책을 쓰고싶어 합니다.</p>\n<p>책을 쓸 때에 기재해야 할 내용은 무엇이 있을까요?</p>\n<ul>\n<li>제목</li>\n<li>작성자</li>\n<li>내용</li>\n<li>가격</li>\n</ul>\n<p>등 이렇게 필요할 것입니다.</p>\n<p>이때 각각의 내용은 하나의 <code>데이터</code>가 되고, 이 데이터가 <code>책</code>이라는 한 객체를 이루므로 모델이라 합니다.</p>\n<p>이 모델은 어떠한 동작을 수행하는 코드이며, public 함수로만 이루어집니다.</p>\n<p>또한 이 모델이 변경될때 마다 뷰에다 자신이 변경되었다고 통보를 합니다.</p>\n<p><br><br><br><br><br></p>\n<h1>뷰(View)</h1>\n<p>화면에 표시되는 글자, 체크박스, 윈도우와 같은 UI(User Interface)라는 시각적 요소</p>\n<br>\n뷰는 다음과 같은 규칙을 가지고 있습니다.\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">1. 모델이 가지고 있는 정보를 따로 저장해서는 안된다.\n\n2. 모델이나 컨트롤러과 같이 다른 구성 요소를 몰라야 된다.\n\n3. 변경이 일어나면, 변경 통지에 대한 처리 방법을 구현해야만 한다.</code>\n        </deckgo-highlight-code>\n<p>예를 들면 작성자가 책을 쓰고 저장한 후 출판하기 위해 출판사로 넘깁니다.</p>\n<p>이때 출판사는 '뷰'가 됩니다.</p>\n<p>이 출판사는 책을 출판하기 위해 넘겨받은 데이터로 출간을 하되, 개인적으로 복사해 소장하면 안됩니다.</p>\n<p>또한 이 출판사는 데이터만 받아 출간만 하면 되니 작가가 뭘 하든 신경을 안써도 됩니다.</p>\n<p>그리고 독자들이 이 책에 문제를 발견하거나 수정하기를 원해 책의 내용을 수정해야 할 때 독자의 문의를 받아 무엇을 수정해야 하는지 작가에게 전달합니다.</p>\n<p>이 작업을 위한 처리 방법을 구현해야 합니다.</p>\n<p><br> <br> <br> <br> <br></p>\n<h1>컨트롤러(Controller)</h1>\n<p>모델과 뷰를 연결해 주는 것</p>\n<br>\n컨트롤러는 다음과 같은 규칙을 가지고 있습니다.\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">1. 모델이나 뷰에 대해서 알고 있어야 한다.\n\n2. 모델이나 뷰의 변경을 모니터링 해야 한다.</code>\n        </deckgo-highlight-code>\n<p>예를 들면 작가의 지인이 출판사에 아는 사람이 있어 지인을 통해 책을 내고싶어 합니다.</p>\n<p>이때 작가와 출판사를 이어주는 지인이 '컨트롤러'라 할 수 있습니다.</p>\n<p>이 지인은 출판사와 작가를 실시간으로 이어주어야 하므로 작가와 출판사가 뭐하는지 알고있어야 합니다.</p>\n<p>또한 출판사가 내용 변경 등을 작가에게 요청하기 위해서 지인을 통해 작가에게 전달하면, 작가가 수정 후 데이터를 지인에게 전달해 다시 출판사로 들고 가야 하므로 항상 모니터링 하고 있어야 합니다.</p>\n<p><br><br><br><br><br></p>\n<h1>MVC 패턴을 쓰는 이유</h1>\n<p>MVC 패턴을 사용 하면 각각의 역할을 나누어 개발을 하기 때문에 한 기능에 문제가 발생 해도 그 문제에 해당하는 모든 코드를 수정하는 것이 아닌, 한 부분만 수정이 가능하다.</p>\n<p>즉, 유지보수가 매우 쉬워진다는 것이다.</p>\n<p>또한 많은 프레임워크들이 MVC패턴을 사용하도록 하고있는데, 이 패턴을 익혀두면 여러 프레임워크를 사용하는데 어려움을 덜 수 있을것이다.</p>\n<p><br><br><br><br><br></p>\n<hr>\n<h3><a href=\"https://bsnippet.tistory.com/13\">참고</a></h3>\n<hr>","frontmatter":{"title":"스프링부트 MVC 패턴","profile":"https://avatars.githubusercontent.com/u/62922765?v=4","name":"허새찬","createdAt":"2021년 5월 3일"}}},"pageContext":{"slug":"/blog/spring_boot_mvc_pattern/"}},"staticQueryHashes":[]}